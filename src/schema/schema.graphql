type Query{
    users: ResultUsers
    login(email: String!, password: String!): ResultLogin
    me: ResultUser
}

type Mutation{
    register(user:UserInput!): ResultUser
}

type ResultUsers implements Result{
    status: Boolean!
    message: String!
    users: [User!]!
}

type ResultUser implements Result{
    status: Boolean!
    message: String!
    user: User
}

type ResultLogin implements Result{
    status: Boolean!
    message: String!
    token: String
}

type User {
    "identificador unico"
    id: ID!
    "nombre del usuario"
    name: String!
    "apellido del usuario"
    lastname: String!
    "email de la cuenta"
    email: String!
    "password de la cuenta"
    password: String!
    "fecha de registro"
    registerDate: String!
    "solo mayores de 18 a√±os"
    birthDay: String!
    role: Role!
}

input UserInput{
    id: ID
    "nombre del usuario"
    name: String!
    "apellido del usuario"
    lastname: String!
    "email de la cuenta"
    email: String!
    "password de la cuenta"
    password: String!
    "fecha de registro"
    birthDay: String!
    role: Role = CLIENT
}
enum Role {
    CLIENT
    ADMIN
}

interface Result{
    status: Boolean!
    message: String!
}
